{
	// Workbench
	"workbench.startupEditor": "none",
	"workbench.activityBar.location": "top",
	"workbench.tree.renderIndentGuides": "none",
	"git.openRepositoryInParentFolders": "never",
	"security.workspace.trust.untrustedFiles": "open",
	"security.workspace.trust.emptyWindow": true,
	"diffEditor.useInlineViewWhenSpaceIsLimited": true,
	"window.menuBarVisibility": "compact",
	"workbench.editor.labelFormat": "short",

	// Editor
	"editor.folding": true,
	"editor.guides.indentation": false,
	"editor.scrollbar.verticalScrollbarSize": 10,
	"editor.minimap.enabled": false,
	"editor.smoothScrolling": true,
	"editor.scrollBeyondLastLine": true,
	"editor.cursorSmoothCaretAnimation": "on",
	"editor.renderWhitespace": "none",
	"editor.cursorBlinking": "solid",
	"editor.lineNumbers": "relative",
	"editor.cursorSurroundingLines": 15,
	"breadcrumbs.enabled": false,

	// Disable annoying messages
	"explorer.confirmDelete": false,
	"explorer.confirmDragAndDrop": false,
	"workbench.tips.enabled": false,

	// File formatting
	"files.defaultLanguage": "markdown",
	"files.trimFinalNewlines": true,
	"files.trimTrailingWhitespace": true,
	"files.autoSave": "afterDelay",
	"editor.linkedEditing": true,
	"editor.insertSpaces": false,
	"editor.detectIndentation": false,
	"editor.useTabStops": true,

	// Terminal
	"terminal.integrated.cursorStyle": "line",

	// Font Settings
	"editor.fontLigatures": true,
	"editor.lineHeight": 1.65,
	"debug.console.fontFamily": "JetBrainsMono Nerd Font Mono",
	"terminal.integrated.fontFamily": "JetBrainsMono Nerd Font Mono",
	"chat.editor.fontFamily": "JetBrainsMono Nerd Font Mono",
	"scm.inputFontFamily": "JetBrainsMono Nerd Font Mono",
	"notebook.output.fontFamily": "JetBrainsMono Nerd Font Mono",
	"markdown.preview.fontFamily": "JetBrainsMono Nerd Font Mono",
	"editor.inlayHints.fontFamily": "JetBrainsMono Nerd Font Mono",
	"editor.fontFamily": "JetBrainsMono Nerd Font Mono",
	"editor.codeLensFontFamily": "JetBrainsMono Nerd Font Mono",
	"editor.inlineSuggest.fontFamily": "JetBrainsMono Nerd Font Mono",
	"editor.experimentalInlineEdit.fontFamily": "JetBrainsMono Nerd Font Mono",
	"scm.inputFontSize": 14,
	"debug.console.fontSize": 14,
	"chat.editor.fontSize": 14,
	"markdown.preview.fontSize": 14,
	"notebook.markup.fontSize": 14,
	"notebook.output.fontSize": 14,
	"editor.fontSize": 14,
	"editor.suggestFontSize": 14,
	"editor.codeLensFontSize": 14,
	"editor.inlayHints.fontSize": 14,
	"terminal.integrated.fontSize": 14,
	"terminal.integrated.fontWeightBold": "normal",
	"terminal.integrated.letterSpacing": 1,
	"terminal.integrated.lineHeight": 1.05,

	// Extensions
	"remote.autoForwardPortsSource": "output",
	"extensions.ignoreRecommendations": true,
	"[markdown]": {
		"editor.wordWrap": "wordWrapColumn",
		"editor.wordWrapColumn": 100
	},

	// JavaScript
	"javascript.updateImportsOnFileMove.enabled": "always",

	// Neovim
	"vscode-neovim.neovimExecutablePaths.win32": "C:\\Program Files\\Neovim\\bin\\nvim.exe",
	"vscode-neovim.neovimInitVimPaths.win32": "C:\\Users\\haeckert\\AppData\\Local\\nvim\\init.lua",
	"vscode-neovim.compositeKeys": {
		"jj": {
			"command": "vscode-neovim.escape",
		},
	},

	// Improve extension performance
	"extensions.experimental.affinity": {
		"asvetliakov.vscode-neovim": 1
	},
	"files.associations": {
		".cflintrc": "json"
	},
	"editor.inlineSuggest.suppressSuggestions": true,
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr",
		"cfabort",
		"cfapplication",
		"cfargument",
		"cfassociate",
		"cfbreak",
		"cfchartdata",
		"cfcollection",
		"cfcontent",
		"cfcontinue",
		"cfcookie",
		"cfdirectory",
		"cfdump",
		"cfelse",
		"cfelseif",
		"cferror",
		"cfexecute",
		"cfexit",
		"cffile",
		"cfflush",
		"cfheader",
		"cfhttpparam",
		"cfimage",
		"cfimport",
		"cfinclude",
		"cfindex",
		"cfinput",
		"cfinvokeargument",
		"cflocation",
		"cflog",
		"cfloginuser",
		"cflogout",
		"cfmailparam",
		"cfobject",
		"cfobjectcache",
		"cfparam",
		"cfpop",
		"cfprocessingdirective",
		"cfprocparam",
		"cfprocresult",
		"cfproperty",
		"cfqueryparam",
		"cfregistry",
		"cfreportparam",
		"cfrethrow",
		"cfreturn",
		"cfschedule",
		"cfspreadsheet",
		"cfsearch",
		"cfset",
		"cfsetting",
		"cfthrow",
		"cfwddx"
	],
	"mssql.persistQueryResultTabs": true,
	"mssql.resultsFontFamily": "JetBrainsMono Nerd Font Mono",
	"mssql.resultsFontSize": 12,
	"mssql.format.alignColumnDefinitionsInColumns": true,
	"mssql.connections": [
		{
			"server": "localhost",
			"database": "ventari",
			"authenticationType": "SqlLogin",
			"user": "sa",
			"password": "",
			"emptyPasswordInput": false,
			"savePassword": true,
			"profileName": "localhost",
			"encrypt": "Mandatory",
			"trustServerCertificate": true,
			"connectTimeout": 15,
			"commandTimeout": 30,
			"applicationName": "vscode-mssql"
		}
	],

	// Replace Rules
	"replacerules.rules": {
        "CFML to CfScript - Part 1": {
            "find": "<cfset ",
            "replace": ""
        },
        "CFML to CfScript - Part 2": {
            "find": ">",
            "replace": ";"
        },
        "CFML to CfScript - Part 3": {
            "find": "<!---",
            "replace": "//"
        },
        "CFML to CfScript - Part 4": {
            "find": " ---;",
            "replace": ""
        },
        "CFML to CfScript - Part 5": {
            "find": "<cf",
            "replace": ""
        },
        "CFML to CfScript - Part 6": {
            "find": "property name=\"(\\w+)\" type=\"([a-zA-Z.]+)\".*;",
            "replace": "property $2 $1;"
        },
        "CFML to CfScript - Part 7": {
            "find": " output=\"(true|false)\"",
            "replace": ""
        },
        "CFML to CfScript - Part 8": {
            "find": "function name=\"(\\w+)\" access=\"(\\w+)\" returntype=\"([a-zA-Z.]+)\".*?;",
            "replace": "$2 $3 function $1() {"
        },
        "CFML to CfScript - Part 9": {
            "find": "function name=\"(\\w+)\" returntype=\"([a-zA-Z.]+)\" access=\"(\\w+)\".*?;",
            "replace": "$3 $2 function $1() {"
        },
        "CFML to CfScript - Part 10": {
            "find": "loop array=\"#([a-zA-Z.]+)#\" index=\"([a-zA-Z.]+)\";",
            "replace": "for( $2 in $1 ) {"
        },
        "CFML to CfScript - Part 11": {
            "find": "</cf.*;",
            "replace": "}"
        },
        "CFML to CfScript - Part 12": {
            "find": "argument name=\"(\\w+)\" type=\"(.*?)\" required=\"true\";",
            "replace": "required $2 $1;"
        },
        "CFML to CfScript - Part 13": {
            "find": "argument name=\"(\\w+)\" type=\"(.*?)\" required=\"false\";",
            "replace": "$2 $1;"
        },
        "CFML to CfScript - Part 14": {
            "find": "argument name=\"(\\w+)\" type=\"(.*?)\" required=\"false\" default=\"(.*)\";",
            "replace": "$2 $1 = $3;"
        },
        "CFML to CfScript - Part 15": {
            "find": "if (.*);",
            "replace": "if ($1) {"
        },
        "CFML to CfScript - Part 16": {
            "find": "else;",
            "replace": "} else {"
        },
        "CFML to CfScript - Part 17": {
            "find": "(component.*?);",
            "replace": "$1 {"
        },
        "Turn CreateObject into new": {
            "find": "CreateObject\\(\"([a-zA-Z.]+)\"\\).init",
            "replace": "new $1"
        },
        "Refactor Commas - Part 1": {
            "find": "(\\n+|\\s+), (.*)",
            "replace": ",$1$2"
        },
        "Refactor Commas - Part 2": {
            "find": "(\\t+)  (\\S+)",
            "replace": "$1$2"
        },
        "Parameter newlines": {
            "find": "\\s*(:?\\n)+\\s*\\(",
            "replace": "("
        },
        "Format else-if-for spaces": {
            "find": "(if|elseif|for)\\s*\\(\\s*(.*?)\\s*\\)(\\s|\\n)*\\{",
            "replace": "$1 ($2) {"
        },
        "Format cfparams - Part 1": {
            "find": "cfparam\\( default=\"(.*?)\", name=\"(.*?)\" \\)",
            "replace": "param $2 = \"$1\""
        },
        "Format cfparams - Part 2": {
            "find": "param name=\"(.*?)\" type=\".*?\" default=\"(.*?)\"",
            "replace": "param $1 = \"$2\""
        },
        "Format properties": {
            "find": "property name=\"(.*?)\" type=\"(.*?)\"",
            "replace": "property $2 $1"
        },
        "NOT -> !": {
            "find": "\\(\\s*NOT\\s*",
            "replace": "(!"
        },
        "Remove cf_sql_*": {
            "find": "cf_sql_",
            "replace": ""
        },
        "ArrayLen() -> Member Function": {
            "find": "ArrayLen\\(\\s*([^)]+?)\\s*\\)",
            "replace": "$1.len()"
        },
        "ArrayAppend() -> Member Function": {
            "find": "ArrayAppend\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.append($2)"
        },
        "ArrayToList() -> Member Function": {
            "find": "ArrayToList\\(\\s*([^)]+?)\\s*\\)",
            "replace": "$1.toList()"
        },
        "ArrayFind() -> Member Function": {
            "find": "ArrayFind\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.find($2)"
        },
        "ArrayFindNoCase() -> Member Function": {
            "find": "ArrayFindNoCase\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.findNoCase($2)"
        },
        "ValueList() -> Member Function": {
            "find": "ValueList\\(\\s*([^ ]+?).(\\w+?)\\s*\\)",
            "replace": "$1.valueArray(\"$2\").toList()"
        },
        "ListToArray() -> Member Function": {
            "find": "ListToArray\\(\\s*([^)]+?)\\s*\\)",
            "replace": "$1.listToArray()"
        },
        "ListFind() -> Member Function": {
            "find": "ListFind\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.find($2)"
        },
        "ListFindNoCase() -> Member Function": {
            "find": "ListFindNoCase\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.findNoCase($2)"
        },
        "StructKeyExists() -> Member Function": {
            "find": "StructKeyExists\\(\\s*([^,]+)\\s*,\\s*([^)]+?)\\s*\\)",
            "replace": "$1.keyExists($2)"
        },
        "StructIsEmpty() -> Member Function": {
            "find": "StructIsEmpty\\(\\s*([^)]+?)\\s*\\)",
            "replace": "$1.isEmpty()"
        },
        "Clean up merge commit - Part 1": {
            "find": "^commit [a-z0-9]+\\s+",
            "replace": ""
        },
        "Clean up merge commit - Part 2": {
            "find": "^#.*$",
            "replace": ""
        },
        "Clean up merge commit - Part 3": {
            "find": "^Author: .*",
            "replace": ""
        },
        "Clean up merge commit - Part 4": {
            "find": "^Date: .*",
            "replace": ""
        },
        "Clean up merge commit - Part 5": {
            "find": "^Squashed commit of the following:.*",
            "replace": ""
        },
        "Clean up merge commit - Part 6": {
            "find": "^\\s*(?:\\r|\\n\\r?)",
            "replace": ""
        },
        "Clean up merge commit - Part 7": {
            "find": "^\\s+",
            "replace": ""
        },
        "Clean up merge commit - Part 8": {
            "find": "^id: (\\d+) comment: (.*)",
            "replace": "id: $1 comment: \n\n$2",
            "flags": "u"
        },
        "Clean up merge commit - Part 9": {
            "find": "^id: \\d+ comment: ([a-zA-Z0-9 .,()\\[\\]{}]+)",
            "replace": "$1"
        },
        "Clean up merge commit - Part 10": {
            "find": "\\.\\s+(\\S+)",
            "replace": ".\n$1"
        }
    },
    "replacerules.rulesets": {
        "Convert CFML to CfScript": {
            "rules": [
                "CFML to CfScript - Part 1",
                "CFML to CfScript - Part 2",
                "CFML to CfScript - Part 3",
                "CFML to CfScript - Part 4",
                "CFML to CfScript - Part 5",
                "CFML to CfScript - Part 6",
                "CFML to CfScript - Part 7",
                "CFML to CfScript - Part 8",
                "CFML to CfScript - Part 9",
                "CFML to CfScript - Part 10",
                "CFML to CfScript - Part 11",
                "CFML to CfScript - Part 12",
                "CFML to CfScript - Part 13",
                "CFML to CfScript - Part 14",
                "CFML to CfScript - Part 15",
                "CFML to CfScript - Part 16",
                "CFML to CfScript - Part 17",
                "Turn CreateObject into new",
                "Refactor Commas - Part 1",
                "Refactor Commas - Part 2",
                "Parameter newlines",
                "Format else-if-for spaces",
                "Format cfparams - Part 1",
                "Format cfparams - Part 2",
                "Format properties",
                "NOT -> !",
                "Remove cf_sql_*",
                "ArrayLen() -> Member Function",
                "ArrayAppend() -> Member Function",
                "ArrayToList() -> Member Function",
                "ArrayFind() -> Member Function",
                "ArrayFindNoCase() -> Member Function",
                "ValueList() -> Member Function",
                "ListToArray() -> Member Function",
                "ListFind() -> Member Function",
                "ListFindNoCase() -> Member Function",
                "StructKeyExists() -> Member Function",
                "StructIsEmpty() -> Member Function"
            ]
        },
        "Basic refactoring": {
            "rules": [
                "Turn CreateObject into new",
                "Refactor Commas - Part 1",
                "Refactor Commas - Part 2",
                "Parameter newlines",
                "Format else-if-for spaces",
                "Format cfparams - Part 1",
                "Format cfparams - Part 2",
                "Format properties",
                "NOT -> !",
                "Remove cf_sql_*",
                "ArrayLen() -> Member Function",
                "ArrayAppend() -> Member Function",
                "ArrayToList() -> Member Function",
                "ArrayFind() -> Member Function",
                "ArrayFindNoCase() -> Member Function",
                "ValueList() -> Member Function",
                "ListToArray() -> Member Function",
                "ListFind() -> Member Function",
                "ListFindNoCase() -> Member Function",
                "StructKeyExists() -> Member Function",
                "StructIsEmpty() -> Member Function"
            ]
        },
        "Format newlines and spaces": {
            "rules": [
                "Refactor Commas - Part 1",
                "Refactor Commas - Part 2",
                "Parameter newlines",
                "Format else-if-for spaces"
            ]
        },
        "Clean up merge commit": {
            "rules": [
                "Clean up merge commit - Part 1",
                "Clean up merge commit - Part 2",
                "Clean up merge commit - Part 3",
                "Clean up merge commit - Part 4",
                "Clean up merge commit - Part 5",
                "Clean up merge commit - Part 6",
                "Clean up merge commit - Part 7",
                "Clean up merge commit - Part 8",
                "Clean up merge commit - Part 9",
                "Clean up merge commit - Part 10"
            ]
        }
	},

	// Catppuccin settings
	"workbench.colorTheme": "Catppuccin Frappé",
	"workbench.iconTheme": "catppuccin-mocha",
    "catppuccin.accentColor": "green",
    "catppuccin.workbenchMode": "flat",
    "catppuccin.syncWithIconPack": false,
    "catppuccin-icons.hidesExplorerArrows": true,
    "catppuccin-icons.specificFolders": true,
    "catppuccin-icons.associations.extensions": {
        "cfm": "mjml",
        "cfc": "cobol"
    },
    "catppuccin-icons.associations.files": {
        "Service.cfc": "database"
    },
    "catppuccin-icons.associations.folders": {
        "view": "folder_layouts",
        "viewModel": "folder_workflows",
        "service": "folder_database"
    },
    "catppuccin.customUIColors": {
        "all": {
            "editor.foldBackground": "#00000000"
        }
    }
}